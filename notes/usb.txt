
SerialUSB
-------------------------------------------------------------------------------
The low-level serial USB implementation (in libmaple, written in C) is always
non-blocking. A blocking implementation which polls with an optional timeout
is in wirish (written in C++).

begin() sets mode (and timeout if appropriate)
end() disables the endpoint and hardware peripheral
flush() clears the RX and TX buffers
available() gives # of bytes in RX buffer
pending() gives # of bytes in TX buffer
read() gets one byte from RX buffer (or ??? if empty)
write(), print(), println(), see below

there is nothing preventing the implementation of setTimeout(),
flushTX/flushRX, etc, except for code size.

NONBLOCKING (-1)
    print() returns immediately with information about how much data was 
    transmitted. 64 bytes is the maximum that can be sent at a time, and 
    possibly less if buffer isn't empty. it's up to usercode to chunk up
    larger datablocks, see if the buffer is full, etc

    returns pending (max 64) if bytes got put in the TX buffer
    returns 0 if buffer was full
    returns -1 if connection seems to be closed or there was another error.


BLOCKING (0) 
    print() will block INDEFINATELY waiting for an open connection to send 
    an arbitrarily long array of bytes through with up to 64 bytes per packet.

    returns sent (# of bytes added to the TX buffer successfully; all but the
        last 64 or so will have been fully transmitted) 
    returns -1 if connection was closed or there was another error.

TIMEOUT (the default, with 10ms. timeout period in ms)
    print() will behave as in BLOCKING mode, except that it will timeout after
    a given number of milliseconds. the timeout is not reset after every packet
    is sent, so the device should be set with a large timeout if many packets
    are going to be sent in one go, or the transmission will get cut off.

    returns sent (# of bytes added to the TX buffer successfully; all but the
        last 64 or so will have been fully transmitted) 
    returns sent (# of bytes added 
